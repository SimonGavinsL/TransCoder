<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/CHECK_IF_STACK_ELEMENTS_ARE_PAIRWISE_CONSECUTIVE.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>static</ns0:specifier> <ns0:name>boolean</ns0:name></ns0:type> <ns0:name>pairWiseConsecutive</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name><ns0:name>Stack</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:type> <ns0:name>s</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name><ns0:name>Stack</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:type> <ns0:name>aux</ns0:name> <ns0:init>= <ns0:expr><ns0:operator>new</ns0:operator> <ns0:call><ns0:name><ns0:name>Stack</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:while>while <ns0:condition>( <ns0:expr><ns0:operator>!</ns0:operator> <ns0:call><ns0:name><ns0:name>s</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>isEmpty</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>aux</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>push</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>s</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>peek</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>s</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>pop</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:while> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>boolean</ns0:name></ns0:type> <ns0:name>result</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="boolean">true</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:while>while <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>aux</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>size</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>&gt;</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>x</ns0:name> <ns0:init>= <ns0:expr><ns0:call><ns0:name><ns0:name>aux</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>peek</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>aux</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>pop</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>y</ns0:name> <ns0:init>= <ns0:expr><ns0:call><ns0:name><ns0:name>aux</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>peek</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>aux</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>pop</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>Math</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>abs</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name> <ns0:operator>-</ns0:operator> <ns0:name>y</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>result</ns0:name> <ns0:operator>=</ns0:operator> <ns0:literal type="boolean">false</ns0:literal></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:if></ns0:if_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>s</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>push</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>s</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>push</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>y</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:while> <ns0:return>return <ns0:expr><ns0:name>result</ns0:name></ns0:expr> ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>