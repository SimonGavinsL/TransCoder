<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/ROOTS_QUADRATIC_EQUATION.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:name>void</ns0:name></ns0:type> <ns0:name>findRoots</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>a</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>b</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>c</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>d</ns0:name> <ns0:init>= <ns0:expr><ns0:name>b</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>b</ns0:name> <ns0:operator>-</ns0:operator> <ns0:literal type="number">4</ns0:literal> <ns0:operator>*</ns0:operator> <ns0:name>a</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>c</ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>double</ns0:name></ns0:type> <ns0:name>sqrt_val</ns0:name> <ns0:init>= <ns0:expr><ns0:call><ns0:name>sqrt</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name>abs</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>d</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>d</ns0:name> <ns0:operator>&gt;</ns0:operator> <ns0:literal type="number">0</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Roots &#226;&#150;&#129; are &#226;&#150;&#129; real &#226;&#150;&#129; and &#226;&#150;&#129; different &#226;&#150;&#129; \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:operator>(</ns0:operator> <ns0:name>double</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:operator>-</ns0:operator> <ns0:name>b</ns0:name> <ns0:operator>+</ns0:operator> <ns0:name>sqrt_val</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>/</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>*</ns0:operator> <ns0:name>a</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" \n "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:name>double</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:operator>-</ns0:operator> <ns0:name>b</ns0:name> <ns0:operator>-</ns0:operator> <ns0:name>sqrt_val</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>/</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>*</ns0:operator> <ns0:name>a</ns0:name> <ns0:operator>)</ns0:operator></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Roots &#226;&#150;&#129; are &#226;&#150;&#129; complex &#226;&#150;&#129; \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:operator>-</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:name>double</ns0:name> <ns0:operator>)</ns0:operator> <ns0:name>b</ns0:name> <ns0:operator>/</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>*</ns0:operator> <ns0:name>a</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; + &#226;&#150;&#129; i "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>sqrt_val</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" \n "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:operator>-</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:name>double</ns0:name> <ns0:operator>)</ns0:operator> <ns0:name>b</ns0:name> <ns0:operator>/</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>*</ns0:operator> <ns0:name>a</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; - &#226;&#150;&#129; i "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>sqrt_val</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>