<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/WILDCARD_CHARACTER_MATCHING.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>static</ns0:specifier> <ns0:name>boolean</ns0:name></ns0:type> <ns0:name>match</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>String</ns0:name></ns0:type> <ns0:name>first</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>String</ns0:name></ns0:type> <ns0:name>second</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:operator>(</ns0:operator> <ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>length</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>&gt;</ns0:operator> <ns0:literal type="number">1</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>charAt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:literal type="char">' ? '</ns0:literal> <ns0:operator>)</ns0:operator> <ns0:operator>||</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>length</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:call><ns0:name><ns0:name>second</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>length</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>charAt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:call><ns0:name><ns0:name>second</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>charAt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>)</ns0:operator></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:return>return <ns0:expr><ns0:call><ns0:name>match</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>substring</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>second</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>substring</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:return></ns0:block_content></ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>length</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>&gt;</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>charAt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:literal type="char">' * '</ns0:literal></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:return>return <ns0:expr><ns0:call><ns0:name>match</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>first</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>substring</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>second</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>||</ns0:operator> <ns0:call><ns0:name>match</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>first</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>second</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>substring</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:return></ns0:block_content></ns0:block></ns0:if></ns0:if_stmt> <ns0:return>return <ns0:expr><ns0:literal type="boolean">false</ns0:literal></ns0:expr> ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>