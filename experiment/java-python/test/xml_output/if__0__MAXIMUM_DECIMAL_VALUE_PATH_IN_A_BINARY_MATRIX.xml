<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>static</ns0:specifier> <ns0:name>int</ns0:name></ns0:type> <ns0:name>maxDecimalValue</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name><ns0:name>mat</ns0:name> <ns0:index>[ ]</ns0:index> <ns0:index>[ ]</ns0:index></ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>i</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>j</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>p</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>result</ns0:name> <ns0:init>= <ns0:expr><ns0:call><ns0:name><ns0:name>Math</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>max</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name>maxDecimalValue</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>mat</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>j</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>p</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:call><ns0:name>maxDecimalValue</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>mat</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>j</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>p</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name><ns0:name>mat</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index> <ns0:index>[ <ns0:expr><ns0:name>j</ns0:name></ns0:expr> ]</ns0:index></ns0:name> <ns0:operator>==</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:return>return <ns0:expr><ns0:operator>(</ns0:operator> <ns0:name>int</ns0:name> <ns0:operator>)</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:call><ns0:name><ns0:name>Math</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>pow</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="number">2</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>p</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>+</ns0:operator> <ns0:name>result</ns0:name> <ns0:operator>)</ns0:operator></ns0:expr> ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:return>return <ns0:expr><ns0:name>result</ns0:name></ns0:expr> ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>