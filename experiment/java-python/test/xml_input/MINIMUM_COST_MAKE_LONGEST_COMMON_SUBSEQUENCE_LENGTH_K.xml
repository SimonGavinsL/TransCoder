<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>solve</name> <parameter_list>( <parameter><decl><type><name>char</name></type> <name><name>X</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>char</name></type> <name><name>Y</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>dp</name> <index>[ ]</index> <index>[ ]</index> <index>[ ]</index></name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>|</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <return>return <expr><operator>(</operator> <name>int</name> <operator>)</operator> <literal type="number">1e9</literal></expr> ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name><name>dp</name> <index>[ <expr><name>l</name></expr> ]</index> <index>[ <expr><name>r</name></expr> ]</index> <index>[ <expr><name>k</name></expr> ]</index></name> <operator>!=</operator> <operator>-</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <return>return <expr><name><name>dp</name> <index>[ <expr><name>l</name></expr> ]</index> <index>[ <expr><name>r</name></expr> ]</index> <index>[ <expr><name>k</name></expr> ]</index></name></expr> ;</return> </block_content>}</block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>cost</name> <init>= <expr><operator>(</operator> <name><name>X</name> <index>[ <expr><name>l</name></expr> ]</index></name> <operator>-</operator> <literal type="char">' a '</literal> <operator>)</operator> <operator>^</operator> <operator>(</operator> <name><name>Y</name> <index>[ <expr><name>r</name></expr> ]</index></name> <operator>-</operator> <literal type="char">' a '</literal> <operator>)</operator></expr></init></decl> ;</decl_stmt> <return>return <expr><name><name>dp</name> <index>[ <expr><name>l</name></expr> ]</index> <index>[ <expr><name>r</name></expr> ]</index> <index>[ <expr><name>k</name></expr> ]</index></name> <operator>=</operator> <call><name><name>Math</name> <operator>.</operator> <name>min</name></name> <argument_list>( <argument><expr><call><name><name>Math</name> <operator>.</operator> <name>min</name></name> <argument_list>( <argument><expr><name>cost</name> <operator>+</operator> <call><name>solve</name> <argument_list>( <argument><expr><name>X</name></expr></argument> , <argument><expr><name>Y</name></expr></argument> , <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>dp</name></expr></argument> )</argument_list></call></expr></argument> , <argument><expr><call><name>solve</name> <argument_list>( <argument><expr><name>X</name></expr></argument> , <argument><expr><name>Y</name></expr></argument> , <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>r</name></expr></argument> , <argument><expr><name>k</name></expr></argument> , <argument><expr><name>dp</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> , <argument><expr><call><name>solve</name> <argument_list>( <argument><expr><name>X</name></expr></argument> , <argument><expr><name>Y</name></expr></argument> , <argument><expr><name>l</name></expr></argument> , <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>k</name></expr></argument> , <argument><expr><name>dp</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</return> </block_content>}</block></function>
</unit>
