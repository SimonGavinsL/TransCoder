<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>findSmallestRange</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name><name>arr</name> <index>[ ]</index> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>minval</name></decl> , <decl><type ref="prev"/><name>maxval</name></decl> , <decl><type ref="prev"/><name>minrange</name></decl> , <decl><type ref="prev"/><name>minel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>maxel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>flag</name></decl> , <decl><type ref="prev"/><name>minind</name></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>minrange</name> <operator>=</operator> <name><name>Integer</name> <operator>.</operator> <name>MAX_VALUE</name></name></expr> ;</expr_stmt> <while>while <condition>( <expr><literal type="boolean">true</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>minind</name> <operator>=</operator> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>minval</name> <operator>=</operator> <name><name>Integer</name> <operator>.</operator> <name>MAX_VALUE</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>maxval</name> <operator>=</operator> <name><name>Integer</name> <operator>.</operator> <name>MIN_VALUE</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>n</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <break>break ;</break> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ]</index></name> <operator>&lt;</operator> <name>minval</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>minind</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt> <expr_stmt><expr><name>minval</name> <operator>=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ]</index></name></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ]</index></name> <operator>&gt;</operator> <name>maxval</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>maxval</name> <operator>=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name><name>ptr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ]</index></name></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <if_stmt><if>if <condition>( <expr><name>flag</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <break>break ;</break> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name><name>ptr</name> <index>[ <expr><name>minind</name></expr> ]</index></name> <operator>++</operator></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><operator>(</operator> <name>maxval</name> <operator>-</operator> <name>minval</name> <operator>)</operator> <operator>&lt;</operator> <name>minrange</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>minel</name> <operator>=</operator> <name>minval</name></expr> ;</expr_stmt> <expr_stmt><expr><name>maxel</name> <operator>=</operator> <name>maxval</name></expr> ;</expr_stmt> <expr_stmt><expr><name>minrange</name> <operator>=</operator> <name>maxel</name> <operator>-</operator> <name>minel</name></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></while> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>printf</name></name> <argument_list>( <argument><expr><literal type="string">" The â smallest â range â is â [ % d â , â % d ] \n "</literal></expr></argument> , <argument><expr><name>minel</name></expr></argument> , <argument><expr><name>maxel</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></function>
</unit>
