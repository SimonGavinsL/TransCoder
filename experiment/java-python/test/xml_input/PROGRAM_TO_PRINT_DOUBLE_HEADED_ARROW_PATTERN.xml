<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PROGRAM_TO_PRINT_DOUBLE_HEADED_ARROW_PATTERN.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>drawPattern</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>N</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nst</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nsp1</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nsp2</name> <init>= <expr><operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>val1</name> <init>= <expr><name>row</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>val2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>row</name> <operator>&lt;=</operator> <name>n</name></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>csp1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>csp1</name> <operator>&lt;=</operator> <name>nsp1</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" â â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>csp1</name> <operator>=</operator> <name>csp1</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> <decl_stmt><decl><type><name>int</name></type> <name>cst1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>cst1</name> <operator>&lt;=</operator> <name>nst</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>val1</name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>val1</name> <operator>=</operator> <name>val1</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>cst1</name> <operator>=</operator> <name>cst1</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> <decl_stmt><decl><type><name>int</name></type> <name>csp2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>csp2</name> <operator>&lt;=</operator> <name>nsp2</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" â â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>csp2</name> <operator>=</operator> <name>csp2</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><name>row</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>!=</operator> <name>n</name></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>cst2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>cst2</name> <operator>&lt;=</operator> <name>nst</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>val2</name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>val2</name> <operator>=</operator> <name>val2</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>cst2</name> <operator>=</operator> <name>cst2</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> </block_content>}</block></if></if_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>row</name> <operator>&lt;=</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>nst</name> <operator>=</operator> <name>nst</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>nsp1</name> <operator>=</operator> <name>nsp1</name> <operator>-</operator> <literal type="number">2</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>nsp2</name> <operator>=</operator> <name>nsp2</name> <operator>+</operator> <literal type="number">2</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>val1</name> <operator>=</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>val2</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>nst</name> <operator>=</operator> <name>nst</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>nsp1</name> <operator>=</operator> <name>nsp1</name> <operator>+</operator> <literal type="number">2</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>nsp2</name> <operator>=</operator> <name>nsp2</name> <operator>-</operator> <literal type="number">2</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>val1</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>row</name></expr> ;</expr_stmt> <expr_stmt><expr><name>val2</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> <expr_stmt><expr><name>row</name> <operator>=</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> </block_content>}</block></function>
</unit>
