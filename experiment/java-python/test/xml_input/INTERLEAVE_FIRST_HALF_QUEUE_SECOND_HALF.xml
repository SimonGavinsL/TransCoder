<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/INTERLEAVE_FIRST_HALF_QUEUE_SECOND_HALF.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>interLeaveQueue</name> <parameter_list>( <parameter><decl><type><name><name>Queue</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>q</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>q</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Input â even â number â of â integers . "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt> <decl_stmt><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>halfSize</name> <init>= <expr><call><name><name>q</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>halfSize</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>poll</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> <while>while <condition>( <expr><operator>!</operator> <call><name><name>s</name> <operator>.</operator> <name>empty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><call><name><name>s</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>halfSize</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>poll</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>halfSize</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>poll</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> <while>while <condition>( <expr><operator>!</operator> <call><name><name>s</name> <operator>.</operator> <name>empty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><call><name><name>s</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>poll</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> </block_content>}</block></function>
</unit>
