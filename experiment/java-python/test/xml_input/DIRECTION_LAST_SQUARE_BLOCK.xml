<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/DIRECTION_LAST_SQUARE_BLOCK.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>direction</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>C</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&lt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Left "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&gt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Up "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>==</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Right "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>==</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Left "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&lt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Right "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&gt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Down "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&lt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Left "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&gt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Up "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&gt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Down "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>R</name> <operator>!=</operator> <name>C</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&lt;</operator> <name>C</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Right "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> </block_content>}</block></function>
</unit>
