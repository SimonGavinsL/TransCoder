<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/MINIMUM_NUMBER_OF_OPERATIONS_TO_MOVE_ALL_UPPERCASE_CHARACTERS_BEFORE_ALL_LOWER_CASE_CHARACTERS.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>minOperations</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>lastUpper</name> <init>= <expr><operator>-</operator> <literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>firstLower</name> <init>= <expr><operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>Character</name> <operator>.</operator> <name>isUpperCase</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>lastUpper</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt> <break>break ;</break> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>Character</name> <operator>.</operator> <name>isLowerCase</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>firstLower</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt> <break>break ;</break> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <if_stmt><if>if <condition>( <expr><name>lastUpper</name> <operator>==</operator> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>firstLower</name> <operator>==</operator> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>countUpper</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>firstLower</name></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>Character</name> <operator>.</operator> <name>isUpperCase</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>countUpper</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <decl_stmt><decl><type><name>int</name></type> <name>countLower</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lastUpper</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>Character</name> <operator>.</operator> <name>isLowerCase</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>countLower</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <return>return <expr><call><name><name>Math</name> <operator>.</operator> <name>min</name></name> <argument_list>( <argument><expr><name>countLower</name></expr></argument> , <argument><expr><name>countUpper</name></expr></argument> )</argument_list></call></expr> ;</return> </block_content>}</block></function>
</unit>
