<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PRINT_EQUAL_SUM_SETS_ARRAY_PARTITION_PROBLEM_SET_2.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>printEqualSumSets</name> <parameter_list>( <parameter><decl><type><name><name>int</name> <index>[ ]</index></name></type> <name>arr</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>currSum</name></decl> , <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name> <operator>.</operator> <name>length</name></name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></for> <if_stmt><if>if <condition>( <expr><operator>(</operator> <name>sum</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" - 1"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>sum</name> <operator>&gt;</operator> &gt; <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>boolean</name> <index>[ ]</index> <index>[ ]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>boolean</name> <index>[ <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><literal type="number">0</literal></expr> ]</index> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <for>for <control>( <init><expr><name>currSum</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>currSum</name> <operator>&lt;=</operator> <name>k</name></expr> ;</condition> <incr><expr><name>currSum</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>currSum</name></expr> ]</index></name> <operator>=</operator> <name><name>dp</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>currSum</name></expr> ]</index></name></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name><name>arr</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>&lt;=</operator> <name>currSum</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>currSum</name></expr> ]</index></name> <operator>=</operator> <name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>currSum</name></expr> ]</index></name> <operator>|</operator> <name><name>dp</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>currSum</name> <operator>-</operator> <name><name>arr</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></for> <decl_stmt><decl><type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>set1</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>set2</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>dp</name> <index>[ <expr><name>n</name></expr> ]</index> <index>[ <expr><name>k</name></expr> ]</index></name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" - 1 \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt> <expr_stmt><expr><name>currSum</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt> <while>while <condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>currSum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>dp</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>currSum</name></expr> ]</index></name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>set2</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>dp</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>currSum</name> <operator>-</operator> <name><name>arr</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ]</index></name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>currSum</name> <operator>-=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>set1</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></while> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" Set â 1 â elements : â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>set1</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><call><name><name>set1</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" \n Set â 2 â elements : â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>set2</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><call><name><name>set2</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> </block_content>}</block></function>
</unit>
