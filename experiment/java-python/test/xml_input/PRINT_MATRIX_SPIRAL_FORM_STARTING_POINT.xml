<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>printSpiral</name> <parameter_list>( <parameter><decl><type><name><name>int</name> <index>[ ]</index> <index>[ ]</index></name></type> <name>mat</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>low_row</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <literal type="number">0</literal> <operator>&gt;</operator> <name>a</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>low_column</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <literal type="number">0</literal> <operator>&gt;</operator> <name>b</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>high_row</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <operator>(</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;=</operator> <name>r</name> <operator>)</operator></expr> ?</condition><then> <expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>high_column</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <operator>(</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;=</operator> <name>c</name> <operator>)</operator></expr> ?</condition><then> <expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><operator>(</operator> <name>low_row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>-</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>low_column</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>-</operator> <name>c</name> <operator>)</operator></expr> )</condition> <block>{<block_content> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>low_column</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>high_column</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>low_row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name><name>mat</name> <index>[ <expr><name>low_row</name></expr> ]</index> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <expr_stmt><expr><name>low_row</name> <operator>-=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>low_row</name> <operator>+</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>high_row</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>high_column</name> <operator>&lt;</operator> <name>c</name></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name><name>mat</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>high_column</name></expr> ]</index></name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <expr_stmt><expr><name>high_column</name> <operator>+=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>high_column</name> <operator>-</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>low_column</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>high_row</name> <operator>&lt;</operator> <name>r</name></expr> ;</condition> <incr><expr><operator>--</operator> <name>i</name></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name><name>mat</name> <index>[ <expr><name>high_row</name></expr> ]</index> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <expr_stmt><expr><name>high_row</name> <operator>+=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>high_row</name> <operator>-</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>low_row</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>low_column</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><operator>--</operator> <name>i</name></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name><name>mat</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>low_column</name></expr> ]</index></name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <expr_stmt><expr><name>low_column</name> <operator>-=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></function>
</unit>
