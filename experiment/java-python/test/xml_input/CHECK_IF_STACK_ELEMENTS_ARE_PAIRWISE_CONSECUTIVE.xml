<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/CHECK_IF_STACK_ELEMENTS_ARE_PAIRWISE_CONSECUTIVE.java"><function><type><specifier>static</specifier> <name>boolean</name></type> <name>pairWiseConsecutive</name> <parameter_list>( <parameter><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>s</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>aux</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><operator>!</operator> <call><name><name>s</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>aux</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>s</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><call><name><name>aux</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>aux</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>aux</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>aux</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>aux</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>Math</name> <operator>.</operator> <name>abs</name></name> <argument_list>( <argument><expr><name>x</name> <operator>-</operator> <name>y</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><call><name><name>aux</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>aux</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt> <return>return <expr><name>result</name></expr> ;</return> </block_content>}</block></function>
</unit>
