<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.java"><function><type><specifier>static</specifier> <name>String</name></type> <name>getMinNumberForPattern</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>seq</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>seq</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">" - 1"</literal></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>result</name> <index>[ ]</index></name> <init>= <expr><operator>new</operator> <name><name>char</name> <index>[ <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <name>n</name> <operator>||</operator> <call><name><name>seq</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' I '</literal></expr> )</condition> <block>{<block_content> <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>j</name> <operator>--</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><name><name>result</name> <index>[ <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <operator>(</operator> <name>char</name> <operator>)</operator> <operator>(</operator> <operator>(</operator> <name>int</name> <operator>)</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>count</name> <operator>++</operator> <operator>)</operator></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>seq</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' I '</literal></expr> )</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <return>return <expr><operator>new</operator> <call><name>String</name> <argument_list>( <argument><expr><name>result</name></expr></argument> )</argument_list></call></expr> ;</return> </block_content>}</block></function>
</unit>
