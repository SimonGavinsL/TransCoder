<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS.java"><function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>printNumbers</name> <parameter_list>( <parameter><decl><type><name><name>int</name> <index>[ ]</index></name></type> <name>numbers</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>array</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>number</name> <range>: <expr><name>numbers</name></expr></range></decl></init> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name>findContainsOneTwoThree</name> <argument_list>( <argument><expr><name>number</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>array</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name>number</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></for> <expr_stmt><expr><call><name><name>Collections</name> <operator>.</operator> <name>sort</name></name> <argument_list>( <argument><expr><name>array</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>StringBuffer</name></type> <name>strbuf</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>array</name> <operator>.</operator> <name>iterator</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><call><name><name>it</name> <operator>.</operator> <name>hasNext</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <call><name><name>it</name> <operator>.</operator> <name>next</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>strbuf</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>strbuf</name> <operator>.</operator> <name>append</name></name> <argument_list>( <argument><expr><literal type="string">" , â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><call><name><name>strbuf</name> <operator>.</operator> <name>append</name></name> <argument_list>( <argument><expr><call><name><name>Integer</name> <operator>.</operator> <name>toString</name></name> <argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <return>return <expr><ternary><condition><expr><operator>(</operator> <call><name><name>strbuf</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><call><name><name>strbuf</name> <operator>.</operator> <name>toString</name></name> <argument_list>( )</argument_list></call></expr> </then><else>: <expr><literal type="string">" - 1"</literal></expr></else></ternary></expr> ;</return> </block_content>}</block></function>
</unit>
