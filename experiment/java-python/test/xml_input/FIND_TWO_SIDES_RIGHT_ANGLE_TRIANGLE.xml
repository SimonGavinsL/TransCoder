<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>printOtherSides</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" - 1"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator> <name>n</name> <operator>*</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator> <name>n</name> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" b â = â "</literal> <operator>+</operator> <name>b</name> <operator>+</operator> <literal type="string">" , â c â = â "</literal> <operator>+</operator> <name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" - 1"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>n</name> <operator>*</operator> <name>n</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>n</name> <operator>*</operator> <name>n</name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" b â = â "</literal> <operator>+</operator> <name>b</name> <operator>+</operator> <literal type="string">" , â c â = â "</literal> <operator>+</operator> <name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></function>
</unit>
