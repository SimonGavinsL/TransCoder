<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_1.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>minPalPartion</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>str</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>int</name> <index>[ ]</index></name></type> <name>C</name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[ <expr><name>n</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>boolean</name> <index>[ ]</index> <index>[ ]</index></name></type> <name>P</name> <init>= <expr><operator>new</operator> <name><name>boolean</name> <index>[ <expr><name>n</name></expr> ]</index> <index>[ <expr><name>n</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>j</name></decl> , <decl><type ref="prev"/><name>k</name></decl> , <decl><type ref="prev"/><name>L</name></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><name><name>P</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt> </block_content>}</block></for> <for>for <control>( <init><expr><name>L</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>L</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>L</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>L</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>L</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> ;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>P</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>P</name> <index>[ <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></for> </block_content>}</block></for> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>P</name> <index>[ <expr><literal type="number">0</literal></expr> ]</index> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="boolean">true</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>C</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt></block_content></block></if> <else>else <block>{<block_content> <expr_stmt><expr><name><name>C</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>Integer</name> <operator>.</operator> <name>MAX_VALUE</name></name></expr> ;</expr_stmt> <for>for <control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>P</name> <index>[ <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>C</name> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>&lt;</operator> <name><name>C</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>C</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>C</name> <index>[ <expr><name>j</name></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></else></if_stmt> </block_content>}</block></for> <return>return <expr><name><name>C</name> <index>[ <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ;</return> </block_content>}</block></function>
</unit>
