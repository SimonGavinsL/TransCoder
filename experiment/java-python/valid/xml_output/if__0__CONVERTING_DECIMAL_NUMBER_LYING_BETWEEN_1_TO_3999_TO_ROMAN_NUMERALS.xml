<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NUMERALS.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>static</ns0:specifier> <ns0:name>void</ns0:name></ns0:type> <ns0:name>printRoman</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>number</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>char</ns0:name></ns0:type> <ns0:name><ns0:name>c</ns0:name> <ns0:index>[ ]</ns0:index></ns0:name> <ns0:init>= <ns0:expr><ns0:operator>new</ns0:operator> <ns0:name><ns0:name>char</ns0:name> <ns0:index>[ <ns0:expr><ns0:literal type="number">10001</ns0:literal></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>i</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:while>while <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:literal type="number">1000</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' M '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>/</ns0:operator> <ns0:literal type="number">1000</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">1000</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:if type="elseif">else if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:literal type="number">500</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:literal type="number">900</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' D '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>/</ns0:operator> <ns0:literal type="number">500</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">500</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>sub_digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' C '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="char">' M '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">100</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:if type="elseif">else if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:literal type="number">100</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:literal type="number">400</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' C '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>/</ns0:operator> <ns0:literal type="number">100</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">100</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>sub_digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' C '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="char">' D '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">100</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:if type="elseif">else if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:literal type="number">50</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:literal type="number">90</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' L '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>/</ns0:operator> <ns0:literal type="number">50</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">50</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>sub_digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' X '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="char">' C '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">10</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:if type="elseif">else if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:literal type="number">10</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:literal type="number">40</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' X '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>/</ns0:operator> <ns0:literal type="number">10</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">10</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>sub_digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' X '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="char">' L '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">10</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:if type="elseif">else if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:literal type="number">5</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:literal type="number">9</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' V '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>/</ns0:operator> <ns0:literal type="number">5</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>number</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">5</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>sub_digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' I '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="char">' X '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:literal type="number">0</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:if type="elseif">else if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>number</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:literal type="number">4</ns0:literal></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' I '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>number</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:literal type="number">0</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if> <ns0:else>else <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:call><ns0:name>sub_digit</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="char">' I '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="char">' V '</ns0:literal></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:name>c</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>number</ns0:name> <ns0:operator>=</ns0:operator> <ns0:literal type="number">0</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:while> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>printf</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Roman &#226;&#150;&#129; numeral &#226;&#150;&#129; is : &#226;&#150;&#129; "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>