<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PANGRAM_CHECKING.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkPangram</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>boolean</name> <index>[ ]</index></name></type> <name>mark</name> <init>= <expr><operator>new</operator> <name><name>boolean</name> <index>[ <expr><literal type="number">26</literal></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>str</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><literal type="char">' A '</literal> <operator>&lt;=</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="char">' Z '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="char">' A '</literal></expr> ;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>( <expr><literal type="char">' a '</literal> <operator>&lt;=</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="char">' z '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="char">' a '</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name><name>mark</name> <index>[ <expr><name>index</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt> </block_content>}</block></for> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">25</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>( <expr><name><name>mark</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="boolean">false</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator> <literal type="boolean">false</literal> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt></block_content></block></for> <return>return <expr><operator>(</operator> <literal type="boolean">true</literal> <operator>)</operator></expr> ;</return> </block_content>}</block></function>
</unit>
