<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/STEINS_ALGORITHM_FOR_FINDING_GCD.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>gcd</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr> ;</return></block_content></block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>a</name></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><operator>(</operator> <operator>(</operator> <name>a</name> <operator>|</operator> <name>b</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><operator>++</operator> <name>k</name></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></for> <while>while <condition>( <expr><operator>(</operator> <name>a</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr> ;</expr_stmt></block_content></block></while> <do>do <block>{<block_content> <while>while <condition>( <expr><operator>(</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr> ;</expr_stmt></block_content></block></while> <if_stmt><if>if <condition>( <expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>a</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr> ;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>temp</name></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator> <name>b</name> <operator>-</operator> <name>a</name> <operator>)</operator></expr> ;</expr_stmt> </block_content>}</block> while <condition>( <expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> ;</do> <return>return <expr><name>a</name> <operator>&lt;&lt;</operator> <name>k</name></expr> ;</return> </block_content>}</block></function>
</unit>
