<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>evaluate</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" No â Pythagoras â "</literal> <operator>+</operator> <literal type="string">" Triplet â exists "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>( <expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>var</name> <init>= <expr><literal type="number">1</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>n</name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" Pythagoras â Triplets â "</literal> <operator>+</operator> <literal type="string">" exist â i . e . â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>n</name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>var</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>var</name> <init>= <expr><literal type="number">1</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" Pythagoras â Triplets â "</literal> <operator>+</operator> <literal type="string">" exist â i . e . â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>n</name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>var</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><name>var</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></function>
</unit>
