<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/CHECK_VALID_SEQUENCE_DIVISIBLE_M_1.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>isPossible</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>modulo</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>M</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>arr</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>dp</name> <index>[ ]</index> <index>[ ]</index></name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><name>modulo</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>modulo</name> <operator>%</operator> <name>M</name> <operator>)</operator> <operator>+</operator> <name>M</name> <operator>)</operator> <operator>%</operator> <name>M</name></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>index</name> <operator>==</operator> <name>n</name></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>modulo</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr> ;</return> </block_content>}</block></if></if_stmt> <return>return <expr><literal type="number">0</literal></expr> ;</return> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name><name>dp</name> <index>[ <expr><name>index</name></expr> ]</index> <index>[ <expr><name>modulo</name></expr> ]</index></name> <operator>!=</operator> <operator>-</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <return>return <expr><name><name>dp</name> <index>[ <expr><name>index</name></expr> ]</index> <index>[ <expr><name>modulo</name></expr> ]</index></name></expr> ;</return> </block_content>}</block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>placeAdd</name> <init>= <expr><call><name>isPossible</name> <argument_list>( <argument><expr><name>n</name></expr></argument> , <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>modulo</name> <operator>+</operator> <name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name></expr></argument> , <argument><expr><name>M</name></expr></argument> , <argument><expr><name>arr</name></expr></argument> , <argument><expr><name>dp</name></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>placeMinus</name> <init>= <expr><call><name>isPossible</name> <argument_list>( <argument><expr><name>n</name></expr></argument> , <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>modulo</name> <operator>-</operator> <name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name></expr></argument> , <argument><expr><name>M</name></expr></argument> , <argument><expr><name>arr</name></expr></argument> , <argument><expr><name>dp</name></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>placeAdd</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>index</name></expr> ]</index> <index>[ <expr><name>modulo</name></expr> ]</index></name> <operator>=</operator> <name>res</name></expr> ;</expr_stmt> <return>return <expr><name>res</name></expr> ;</return> </block_content>}</block></function>
</unit>
