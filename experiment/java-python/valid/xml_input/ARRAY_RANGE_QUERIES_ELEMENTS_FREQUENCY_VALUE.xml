<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>solveQuery</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>arr</name> <index>[ ]</index></name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>Map</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>mp</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>mp</name> <operator>.</operator> <name>put</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> , <argument><expr><ternary><condition><expr><call><name><name>mp</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name><name>mp</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name><name>Map</name> <operator>.</operator> <name><name>Entry</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mp</name> <operator>.</operator> <name>entrySet</name></name> <argument_list>( )</argument_list></call></expr></range></decl></init> )</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>( <expr><call><name><name>entry</name> <operator>.</operator> <name>getKey</name></name> <argument_list>( )</argument_list></call> <operator>==</operator> <call><name><name>entry</name> <operator>.</operator> <name>getValue</name></name> <argument_list>( )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for> <return>return <expr><name>count</name></expr> ;</return> </block_content>}</block></function>
</unit>
