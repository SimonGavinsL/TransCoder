<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>fib</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator> <name><name>f</name> <index>[ <expr><name>n</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name><name>f</name> <index>[ <expr><name>n</name></expr> ]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name><name>f</name> <index>[ <expr><name>n</name></expr> ]</index></name></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name><name>f</name> <index>[ <expr><name>n</name></expr> ]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator> <call><name>fib</name> <argument_list>( <argument><expr><name>k</name></expr></argument> )</argument_list></call> <operator>*</operator> <call><name>fib</name> <argument_list>( <argument><expr><name>k</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>fib</name> <argument_list>( <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>*</operator> <call><name>fib</name> <argument_list>( <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> </then><else>: <expr><operator>(</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>fib</name> <argument_list>( <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>fib</name> <argument_list>( <argument><expr><name>k</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>*</operator> <call><name>fib</name> <argument_list>( <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr></else></ternary></expr> ;</expr_stmt> <return>return <expr><name><name>f</name> <index>[ <expr><name>n</name></expr> ]</index></name></expr> ;</return> </block_content>}</block></function>
</unit>
