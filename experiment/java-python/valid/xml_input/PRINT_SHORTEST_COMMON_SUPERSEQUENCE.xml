<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PRINT_SHORTEST_COMMON_SUPERSEQUENCE.java"><function><type><specifier>static</specifier> <name>String</name></type> <name>printShortestSuperSeq</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>X</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>Y</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name><name>X</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>Y</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name> <index>[ ]</index> <index>[ ]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[ <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>X</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <call><name><name>Y</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>dp</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name><name>Math</name> <operator>.</operator> <name>min</name></name> <argument_list>( <argument><expr><name><name>dp</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name></expr></argument> , <argument><expr><name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></for> </block_content>}</block></for> <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>dp</name> <index>[ <expr><name>m</name></expr> ]</index> <index>[ <expr><name>n</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m</name></expr></init></decl> , <decl><type ref="prev"/><name>j</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>X</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <call><name><name>Y</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>str</name> <operator>+=</operator> <operator>(</operator> <call><name><name>X</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>index</name> <operator>--</operator></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>dp</name> <index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>&gt;</operator> <name><name>dp</name> <index>[ <expr><name>i</name></expr> ]</index> <index>[ <expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>str</name> <operator>+=</operator> <operator>(</operator> <call><name><name>Y</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>index</name> <operator>--</operator></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>str</name> <operator>+=</operator> <operator>(</operator> <call><name><name>X</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>index</name> <operator>--</operator></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></while> <while>while <condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>str</name> <operator>+=</operator> <operator>(</operator> <call><name><name>X</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>index</name> <operator>--</operator></expr> ;</expr_stmt> </block_content>}</block></while> <while>while <condition>( <expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>str</name> <operator>+=</operator> <operator>(</operator> <call><name><name>Y</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>index</name> <operator>--</operator></expr> ;</expr_stmt> </block_content>}</block></while> <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>reverse</name> <argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return <expr><name>str</name></expr> ;</return> </block_content>}</block></function>
</unit>
