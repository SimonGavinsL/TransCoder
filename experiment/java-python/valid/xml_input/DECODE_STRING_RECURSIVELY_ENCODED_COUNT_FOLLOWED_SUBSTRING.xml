<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING.java"><function><type><specifier>static</specifier> <name>String</name></type> <name>decode</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>integerstack</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Character</name></argument> &gt;</argument_list></name></type> <name>stringstack</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>String</name></type> <name>temp</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl> , <decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>str</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>Character</name> <operator>.</operator> <name>isDigit</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <while>while <condition>( <expr><call><name><name>Character</name> <operator>.</operator> <name>isDigit</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="char">'0'</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></while> <expr_stmt><expr><name>i</name> <operator>--</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>integerstack</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' ] '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="string">" "</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>integerstack</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>integerstack</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>integerstack</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> <while>while <condition>( <expr><operator>!</operator> <call><name><name>stringstack</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>stringstack</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call> <operator>!=</operator> <literal type="char">' [ '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name><name>stringstack</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call> <operator>+</operator> <name>temp</name></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>stringstack</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>stringstack</name> <operator>.</operator> <name>empty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>stringstack</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call> <operator>==</operator> <literal type="char">' [ '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>stringstack</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>+</operator> <name>temp</name></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>result</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>stringstack</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>result</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">" "</literal></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' [ '</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>Character</name> <operator>.</operator> <name>isDigit</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>stringstack</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else <block>{<block_content> <expr_stmt><expr><call><name><name>stringstack</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>integerstack</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>stringstack</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></for> <while>while <condition>( <expr><operator>!</operator> <call><name><name>stringstack</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>stringstack</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call> <operator>+</operator> <name>result</name></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>stringstack</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <return>return <expr><name>result</name></expr> ;</return> </block_content>}</block></function>
</unit>
