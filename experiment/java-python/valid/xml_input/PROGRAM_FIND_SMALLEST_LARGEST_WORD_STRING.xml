<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>minMaxLengthWords</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>input</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>si</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>ei</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>min_length</name> <init>= <expr><name>len</name></expr></init></decl> , <decl><type ref="prev"/><name>min_start_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>max_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>max_start_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>ei</name> <operator>&lt;=</operator> <name>len</name></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>ei</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name><name>input</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>ei</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="char">' â '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>ei</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>curr_length</name> <init>= <expr><name>ei</name> <operator>-</operator> <name>si</name></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>curr_length</name> <operator>&lt;</operator> <name>min_length</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>min_length</name> <operator>=</operator> <name>curr_length</name></expr> ;</expr_stmt> <expr_stmt><expr><name>min_start_index</name> <operator>=</operator> <name>si</name></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>curr_length</name> <operator>&gt;</operator> <name>max_length</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>max_length</name> <operator>=</operator> <name>curr_length</name></expr> ;</expr_stmt> <expr_stmt><expr><name>max_start_index</name> <operator>=</operator> <name>si</name></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>ei</name> <operator>++</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>si</name> <operator>=</operator> <name>ei</name></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></while> <expr_stmt><expr><name>minWord</name> <operator>=</operator> <call><name><name>input</name> <operator>.</operator> <name>substring</name></name> <argument_list>( <argument><expr><name>min_start_index</name></expr></argument> , <argument><expr><name>min_start_index</name> <operator>+</operator> <name>min_length</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>maxWord</name> <operator>=</operator> <call><name><name>input</name> <operator>.</operator> <name>substring</name></name> <argument_list>( <argument><expr><name>max_start_index</name></expr></argument> , <argument><expr><name>max_length</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></function>
</unit>
