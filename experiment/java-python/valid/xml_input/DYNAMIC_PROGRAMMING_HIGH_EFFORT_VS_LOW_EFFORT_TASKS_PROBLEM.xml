<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>maxTasks</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name><name>high</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>low</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if></if_stmt> <return>return <expr><call><name><name>Math</name> <operator>.</operator> <name>max</name></name> <argument_list>( <argument><expr><name><name>high</name> <index>[ <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <call><name>maxTasks</name> <argument_list>( <argument><expr><name>high</name></expr></argument> , <argument><expr><name>low</name></expr></argument> , <argument><expr><operator>(</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> , <argument><expr><name><name>low</name> <index>[ <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <call><name>maxTasks</name> <argument_list>( <argument><expr><name>high</name></expr></argument> , <argument><expr><name>low</name></expr></argument> , <argument><expr><operator>(</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</return> </block_content>}</block></function>
</unit>
