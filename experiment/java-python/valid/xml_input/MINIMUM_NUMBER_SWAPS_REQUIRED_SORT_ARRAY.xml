<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>minSwaps</name> <parameter_list>( <parameter><decl><type><name><name>int</name> <index>[ ]</index></name></type> <name>arr</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>arr</name> <operator>.</operator> <name>length</name></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name><name>Pair</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>arrpos</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name><name>Pair</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></argument> &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>arrpos</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><operator>new</operator> <call><name><name>Pair</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> , <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <expr_stmt><expr><call><name><name>arrpos</name> <operator>.</operator> <name>sort</name></name> <argument_list>( <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name> <argument_list type="generic">&lt; <argument><name><name>Pair</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></argument> &gt;</argument_list></name></super> <argument_list>( )</argument_list> <block>{ <function><annotation>@ <name>Override</name></annotation> <type><specifier>public</specifier> <name>int</name></type> <name>compare</name> <parameter_list>( <parameter><decl><type><name><name>Pair</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>o1</name></decl></parameter> , <parameter><decl><type><name><name>Pair</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>o2</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>o1</name> <operator>.</operator> <name>getKey</name></name> <argument_list>( )</argument_list></call> <operator>&gt;</operator> <call><name><name>o2</name> <operator>.</operator> <name>getKey</name></name> <argument_list>( )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator> <literal type="number">1</literal></expr> ;</return></block_content></block></if> <if type="elseif">else if <condition>( <expr><call><name><name>o1</name> <operator>.</operator> <name>getKey</name></name> <argument_list>( )</argument_list></call> <operator>.</operator> <call><name>equals</name> <argument_list>( <argument><expr><call><name><name>o2</name> <operator>.</operator> <name>getKey</name></name> <argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr> ;</return></block_content></block></else></if_stmt> </block_content>}</block></function> }</block></class></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name><name>Boolean</name> <index>[ ]</index></name></type> <name>vis</name> <init>= <expr><operator>new</operator> <name><name>Boolean</name> <index>[ <expr><name>n</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>Arrays</name> <operator>.</operator> <name>fill</name></name> <argument_list>( <argument><expr><name>vis</name></expr></argument> , <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>vis</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>||</operator> <call><name><name>arrpos</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>.</operator> <call><name>getValue</name> <argument_list>( )</argument_list></call> <operator>==</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>cycle_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><operator>!</operator> <name><name>vis</name> <index>[ <expr><name>j</name></expr> ]</index></name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name><name>vis</name> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name><name>arrpos</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call> <operator>.</operator> <call><name>getValue</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>cycle_size</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><name>cycle_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator> <name>cycle_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <return>return <expr><name>ans</name></expr> ;</return> </block_content>}</block></function>
</unit>
