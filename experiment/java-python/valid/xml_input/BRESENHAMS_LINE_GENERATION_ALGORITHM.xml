<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/BRESENHAMS_LINE_GENERATION_ALGORITHM.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>bresenham</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>m_new</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name>y2</name> <operator>-</operator> <name>y1</name> <operator>)</operator></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>slope_error_new</name> <init>= <expr><name>m_new</name> <operator>-</operator> <operator>(</operator> <name>x2</name> <operator>-</operator> <name>x1</name> <operator>)</operator></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x1</name></expr></init></decl> , <decl><type ref="prev"/><name>y</name> <init>= <expr><name>y1</name></expr></init></decl> ;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>x2</name></expr> ;</condition> <incr><expr><name>x</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" ( "</literal> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="string">" , "</literal> <operator>+</operator> <name>y</name> <operator>+</operator> <literal type="string">" ) \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>slope_error_new</name> <operator>+=</operator> <name>m_new</name></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>slope_error_new</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>y</name> <operator>++</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>slope_error_new</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name>x2</name> <operator>-</operator> <name>x1</name> <operator>)</operator></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></function>
</unit>
