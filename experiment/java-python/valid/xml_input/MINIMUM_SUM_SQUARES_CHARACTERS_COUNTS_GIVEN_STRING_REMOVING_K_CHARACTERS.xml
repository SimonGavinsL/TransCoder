<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K_CHARACTERS.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>minStringValue</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>str</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>k</name> <operator>&gt;=</operator> <name>l</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name><name>int</name> <index>[ ]</index></name></type> <name>frequency</name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[ <expr><name>MAX_CHAR</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>frequency</name> <index>[ <expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="char">' a '</literal></expr> ]</index></name> <operator>++</operator></expr> ;</expr_stmt></block_content></block></for> <decl_stmt><decl><type><name><name>Comparator</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>IntCompare</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>PriorityQueue</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name><name>PriorityQueue</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CHAR</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>frequency</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name><name>frequency</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></for> <while>while <condition>( <expr><name>k</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>poll</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name>temp</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>--</operator></expr> ;</expr_stmt> </block_content>}</block></while> <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><operator>!</operator> <call><name><name>q</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>result</name> <operator>+=</operator> <name>temp</name> <operator>*</operator> <name>temp</name></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>poll</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <return>return <expr><name>result</name></expr> ;</return> </block_content>}</block></function>
</unit>
