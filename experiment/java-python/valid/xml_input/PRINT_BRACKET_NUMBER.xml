<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/PRINT_BRACKET_NUMBER.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>printBracketNumber</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>exp</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>left_bnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>right_bnum</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>exp</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' ( '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>left_bnum</name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>right_bnum</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><name>left_bnum</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>left_bnum</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>exp</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' ) '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><call><name><name>right_bnum</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>right_bnum</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></function>
</unit>
