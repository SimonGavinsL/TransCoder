<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>totalNodes</name> <parameter_list>( <parameter><decl><type><name><name>Vector</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name><name>adjac</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>Boolean</name></type> <name><name>visited</name> <index>[ ]</index></name> <init>= <expr><operator>new</operator> <name><name>Boolean</name> <index>[ <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>Arrays</name> <operator>.</operator> <name>fill</name></name> <argument_list>( <argument><expr><name>visited</name></expr></argument> , <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>p</name> <index>[ ]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[ <expr><name>n</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>Queue</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name><name>visited</name> <index>[ <expr><name>x</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl> ;</decl_stmt> <while>while <condition>( <expr><operator>!</operator> <call><name><name>q</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>poll</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adjac</name> <index>[ <expr><name>m</name></expr> ]</index></name> <operator>.</operator> <call><name>size</name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>adjac</name> <index>[ <expr><name>m</name></expr> ]</index></name> <operator>.</operator> <call><name>get</name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name><name>visited</name> <index>[ <expr><name>h</name></expr> ]</index></name> <operator>!=</operator> <literal type="boolean">true</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name><name>visited</name> <index>[ <expr><name>h</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt> <expr_stmt><expr><name><name>p</name> <index>[ <expr><name>h</name></expr> ]</index></name> <operator>=</operator> <name>m</name></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></while> <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p</name> <index>[ <expr><name>y</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>i</name> <operator>!=</operator> <name>x</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>count</name> <operator>++</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ;</expr_stmt> </block_content>}</block></while> <return>return <expr><name>count</name></expr> ;</return> </block_content>}</block></function>
</unit>
