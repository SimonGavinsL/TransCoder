<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>findRandomIndexOfMax</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name><name>arr</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>HashMap</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>mp</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>( <expr><call><name><name>mp</name> <operator>.</operator> <name>containsKey</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>mp</name> <operator>.</operator> <name>put</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> , <argument><expr><call><name><name>mp</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><call><name><name>mp</name> <operator>.</operator> <name>put</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt></block_content></block></for> <decl_stmt><decl><type><name>int</name></type> <name>max_element</name> <init>= <expr><name><name>Integer</name> <operator>.</operator> <name>MIN_VALUE</name></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>max_so_far</name> <init>= <expr><name><name>Integer</name> <operator>.</operator> <name>MIN_VALUE</name></name></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name><name>Map</name> <operator>.</operator> <name><name>Entry</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></name></type> <name>p</name> <range>: <expr><call><name><name>mp</name> <operator>.</operator> <name>entrySet</name></name> <argument_list>( )</argument_list></call></expr></range></decl></init> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>p</name> <operator>.</operator> <name>getValue</name></name> <argument_list>( )</argument_list></call> <operator>&gt;</operator> <name>max_so_far</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>max_so_far</name> <operator>=</operator> <call><name><name>p</name> <operator>.</operator> <name>getValue</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>max_element</name> <operator>=</operator> <call><name><name>p</name> <operator>.</operator> <name>getKey</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <operator>(</operator> <operator>(</operator> <operator>new</operator> <call><name>Random</name> <argument_list>( )</argument_list></call> <operator>.</operator> <call><name>nextInt</name> <argument_list>( <argument><expr><name>max_so_far</name></expr></argument> )</argument_list></call> <operator>%</operator> <name>max_so_far</name> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>max_element</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>count</name> <operator>==</operator> <name>r</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" Element â with â maximum â frequency â present â "</literal> <operator>+</operator> <literal type="string">" at â index â "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break> </block_content>}</block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></function>
</unit>
