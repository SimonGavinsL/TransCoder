<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>sumAtKthLevel</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>tree</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>tree</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>++</operator></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' ( '</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>tree</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' ) '</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>level</name> <operator>==</operator> <name>k</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>tree</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="char">'0'</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>++</operator> <name>i</name></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>leftsum</name> <init>= <expr><call><name>sumAtKthLevel</name> <argument_list>( <argument><expr><name>tree</name></expr></argument> , <argument><expr><name>k</name></expr></argument> , <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><operator>++</operator> <name>i</name></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>rightsum</name> <init>= <expr><call><name>sumAtKthLevel</name> <argument_list>( <argument><expr><name>tree</name></expr></argument> , <argument><expr><name>k</name></expr></argument> , <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><operator>++</operator> <name>i</name></expr> ;</expr_stmt> <return>return <expr><name>sum</name> <operator>+</operator> <name>leftsum</name> <operator>+</operator> <name>rightsum</name></expr> ;</return> </block_content>}</block></if></if_stmt> <return>return <expr><name><name>Integer</name> <operator>.</operator> <name>MIN_VALUE</name></name></expr> ;</return> </block_content>}</block></function>
</unit>
