<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>SumOfKsubArray</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name><name>arr</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>Deque</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>S</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> , <decl><type ref="prev"/><name>G</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <while>while <condition>( <expr><operator>!</operator> <call><name><name>S</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name> <index>[ <expr><call><name><name>S</name> <operator>.</operator> <name>peekLast</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name> <operator>&gt;=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>S</name> <operator>.</operator> <name>removeLast</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></while> <while>while <condition>( <expr><operator>!</operator> <call><name><name>G</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name> <index>[ <expr><call><name><name>G</name> <operator>.</operator> <name>peekLast</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name> <operator>&lt;=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>G</name> <operator>.</operator> <name>removeLast</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></while> <expr_stmt><expr><call><name><name>G</name> <operator>.</operator> <name>addLast</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>S</name> <operator>.</operator> <name>addLast</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> <for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name> <operator>.</operator> <name>length</name></name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>arr</name> <index>[ <expr><call><name><name>S</name> <operator>.</operator> <name>peekFirst</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name> <operator>+</operator> <name><name>arr</name> <index>[ <expr><call><name><name>G</name> <operator>.</operator> <name>peekFirst</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name></expr> ;</expr_stmt> <while>while <condition>( <expr><operator>!</operator> <call><name><name>S</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>S</name> <operator>.</operator> <name>peekFirst</name></name> <argument_list>( )</argument_list></call> <operator>&lt;=</operator> <name>i</name> <operator>-</operator> <name>k</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>S</name> <operator>.</operator> <name>removeFirst</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></while> <while>while <condition>( <expr><operator>!</operator> <call><name><name>G</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>G</name> <operator>.</operator> <name>peekFirst</name></name> <argument_list>( )</argument_list></call> <operator>&lt;=</operator> <name>i</name> <operator>-</operator> <name>k</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>G</name> <operator>.</operator> <name>removeFirst</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></while> <while>while <condition>( <expr><operator>!</operator> <call><name><name>S</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name> <index>[ <expr><call><name><name>S</name> <operator>.</operator> <name>peekLast</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name> <operator>&gt;=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>S</name> <operator>.</operator> <name>removeLast</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></while> <while>while <condition>( <expr><operator>!</operator> <call><name><name>G</name> <operator>.</operator> <name>isEmpty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name> <index>[ <expr><call><name><name>G</name> <operator>.</operator> <name>peekLast</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name> <operator>&lt;=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>G</name> <operator>.</operator> <name>removeLast</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></while> <expr_stmt><expr><call><name><name>G</name> <operator>.</operator> <name>addLast</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>S</name> <operator>.</operator> <name>addLast</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>arr</name> <index>[ <expr><call><name><name>S</name> <operator>.</operator> <name>peekFirst</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name> <operator>+</operator> <name><name>arr</name> <index>[ <expr><call><name><name>G</name> <operator>.</operator> <name>peekFirst</name></name> <argument_list>( )</argument_list></call></expr> ]</index></name></expr> ;</expr_stmt> <return>return <expr><name>sum</name></expr> ;</return> </block_content>}</block></function>
</unit>
