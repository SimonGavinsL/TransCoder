<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/TRIANGULAR_NUMBERS_1.java"><function><type><specifier>static</specifier> <name>boolean</name></type> <name>isTriangular</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>num</name> <operator>)</operator></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>a</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator> <name>b</name> <operator>*</operator> <name>b</name> <operator>)</operator> <operator>-</operator> <operator>(</operator> <literal type="number">4</literal> <operator>*</operator> <name>a</name> <operator>*</operator> <name>c</name> <operator>)</operator></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name>float</name></type> <name>root1</name> <init>= <expr><operator>(</operator> <operator>-</operator> <name>b</name> <operator>+</operator> <operator>(</operator> <name>float</name> <operator>)</operator> <call><name><name>Math</name> <operator>.</operator> <name>sqrt</name></name> <argument_list>( <argument><expr><name>d</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>/</operator> <operator>(</operator> <literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>)</operator></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>float</name></type> <name>root2</name> <init>= <expr><operator>(</operator> <operator>-</operator> <name>b</name> <operator>-</operator> <operator>(</operator> <name>float</name> <operator>)</operator> <call><name><name>Math</name> <operator>.</operator> <name>sqrt</name></name> <argument_list>( <argument><expr><name>d</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>/</operator> <operator>(</operator> <literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>)</operator></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>root1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>Math</name> <operator>.</operator> <name>floor</name></name> <argument_list>( <argument><expr><name>root1</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>root1</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr> ;</return></block_content></block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>root2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>Math</name> <operator>.</operator> <name>floor</name></name> <argument_list>( <argument><expr><name>root2</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>root2</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr> ;</return></block_content></block></if></if_stmt> <return>return <expr><literal type="boolean">false</literal></expr> ;</return> </block_content>}</block></function>
</unit>
