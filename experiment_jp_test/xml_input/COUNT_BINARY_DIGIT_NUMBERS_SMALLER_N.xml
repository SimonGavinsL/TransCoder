<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>countOfBinaryNumberLessThanN</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>Queue</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl> ;</decl_stmt> <while>while <condition>( <expr><call><name><name>q</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name>q</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>remove</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>t</name> <operator>&lt;=</operator> <name>N</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name>t</name> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>q</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name>t</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></while> <return>return <expr><name>cnt</name></expr> ;</return> </block_content>}</block></function>
</unit>
