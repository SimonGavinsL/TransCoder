<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>longestNull</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name>Pair</name></argument> &gt;</argument_list></name></type> <name>arr</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><operator>new</operator> <call><name>Pair</name> <argument_list>( <argument><expr><literal type="char">' @ '</literal></expr></argument> , <argument><expr><operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>str</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><operator>new</operator> <call><name>Pair</name> <argument_list>( <argument><expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> , <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <while>while <condition>( <expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>.</operator> <name>first</name> <operator>==</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>.</operator> <name>first</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>.</operator> <name>first</name> <operator>==</operator> <literal type="char">'0'</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>remove</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>remove</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>remove</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>.</operator> <name>second</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name><name>Math</name> <operator>.</operator> <name>max</name></name> <argument_list>( <argument><expr><name>maxlen</name></expr></argument> , <argument><expr><name>i</name> <operator>-</operator> <name>tmp</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> <return>return <expr><name>maxlen</name></expr> ;</return> </block_content>}</block></function>
</unit>
