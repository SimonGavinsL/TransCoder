<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/MERGING_INTERVALS.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>mergeIntervals</name> <parameter_list>( <parameter><decl><type><name>Interval</name></type> <name><name>arr</name> <index>[ ]</index></name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Arrays</name> <operator>.</operator> <name>sort</name></name> <argument_list>( <argument><expr><name>arr</name></expr></argument> , <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name> <argument_list type="generic">&lt; <argument><name>Interval</name></argument> &gt;</argument_list></name></super> <argument_list>( )</argument_list> <block>{ <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name> <parameter_list>( <parameter><decl><type><name>Interval</name></type> <name>i1</name></decl></parameter> , <parameter><decl><type><name>Interval</name></type> <name>i2</name></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><name><name>i2</name> <operator>.</operator> <name>start</name></name> <operator>-</operator> <name><name>i1</name> <operator>.</operator> <name>start</name></name></expr> ;</return> </block_content>}</block></function> }</block></class></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name> <operator>.</operator> <name>length</name></name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name> <operator>.</operator> <name>end</name> <operator>&gt;=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <name>start</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name> <operator>.</operator> <name>end</name> <operator>=</operator> <call><name><name>Math</name> <operator>.</operator> <name>max</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name> <operator>.</operator> <name>end</name></expr></argument> , <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <name>end</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name> <operator>.</operator> <name>start</name> <operator>=</operator> <call><name><name>Math</name> <operator>.</operator> <name>min</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name> <operator>.</operator> <name>start</name></expr></argument> , <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <name>start</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name><name>arr</name> <index>[ <expr><name>index</name></expr> ]</index></name> <operator>=</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name>index</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></for> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" The â Merged â Intervals â are : â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>index</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" [ "</literal> <operator>+</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <name>start</name> <operator>+</operator> <literal type="string">" , "</literal> <operator>+</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <name>end</name> <operator>+</operator> <literal type="string">" ] "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> </block_content>}</block></function>
</unit>
