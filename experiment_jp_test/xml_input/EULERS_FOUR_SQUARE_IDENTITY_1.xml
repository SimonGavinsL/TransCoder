<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/EULERS_FOUR_SQUARE_IDENTITY_1.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkEulerFourSquareIdentity</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>ab</name> <init>= <expr><name>a</name> <operator>*</operator> <name>b</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>ab</name></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>i</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>j</name> <operator>&lt;=</operator> <name>ab</name></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>j</name></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>i</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>k</name> <operator>&lt;=</operator> <name>ab</name></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>double</name></type> <name>l</name> <init>= <expr><call><name><name>Math</name> <operator>.</operator> <name>sqrt</name></name> <argument_list>( <argument><expr><name>ab</name> <operator>-</operator> <operator>(</operator> <name>i</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>k</name> <operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>Math</name> <operator>.</operator> <name>floor</name></name> <argument_list>( <argument><expr><name>l</name></expr></argument> )</argument_list></call> <operator>==</operator> <call><name><name>Math</name> <operator>.</operator> <name>ceil</name></name> <argument_list>( <argument><expr><name>l</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>l</name> <operator>&gt;=</operator> <name>k</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" i â = â "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" j â = â "</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">" \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" k â = â "</literal> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="string">" \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" l â = â "</literal> <operator>+</operator> <operator>(</operator> <name>int</name> <operator>)</operator> <name>l</name> <operator>+</operator> <literal type="string">" \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" Product â of â "</literal> <operator>+</operator> <name>a</name> <operator>+</operator> <literal type="string">" â and â "</literal> <operator>+</operator> <name>b</name> <operator>+</operator> <literal type="string">" â can â be â written â as â sum â of â squares "</literal> <operator>+</operator> <literal type="string">" â of â i , â j , â k , â l â \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name>ab</name> <operator>+</operator> <literal type="string">" â = â "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" * "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" â + â "</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">" * "</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">" â + â "</literal> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="string">" * "</literal> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="string">" â + â "</literal> <operator>+</operator> <operator>(</operator> <name>int</name> <operator>)</operator> <name>l</name> <operator>+</operator> <literal type="string">" * "</literal> <operator>+</operator> <operator>(</operator> <name>int</name> <operator>)</operator> <name>l</name> <operator>+</operator> <literal type="string">" \n "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><name>flag</name> <operator>==</operator> <literal type="boolean">false</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><literal type="string">" Solution â doesn ' t â exist ! "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> </block_content>}</block></function>
</unit>
