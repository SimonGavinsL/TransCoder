<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/CONVERT_DECIMAL_FRACTION_BINARY_NUMBER.java"><function><type><specifier>static</specifier> <name>String</name></type> <name>decimalToBinary</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>k_prec</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>String</name></type> <name>binary</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>Integral</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <name>num</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>double</name></type> <name>fractional</name> <init>= <expr><name>num</name> <operator>-</operator> <name>Integral</name></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>Integral</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><name>Integral</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>binary</name> <operator>+=</operator> <operator>(</operator> <operator>(</operator> <name>char</name> <operator>)</operator> <operator>(</operator> <name>rem</name> <operator>+</operator> <literal type="char">'0'</literal> <operator>)</operator> <operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>Integral</name> <operator>/=</operator> <literal type="number">2</literal></expr> ;</expr_stmt> </block_content>}</block></while> <expr_stmt><expr><name>binary</name> <operator>=</operator> <call><name>reverse</name> <argument_list>( <argument><expr><name>binary</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>binary</name> <operator>+=</operator> <operator>(</operator> <literal type="char">' . '</literal> <operator>)</operator></expr> ;</expr_stmt> <while>while <condition>( <expr><name>k_prec</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>fractional</name> <operator>*=</operator> <literal type="number">2</literal></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>fract_bit</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <name>fractional</name></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>fract_bit</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>fractional</name> <operator>-=</operator> <name>fract_bit</name></expr> ;</expr_stmt> <expr_stmt><expr><name>binary</name> <operator>+=</operator> <operator>(</operator> <name>char</name> <operator>)</operator> <operator>(</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="char">'0'</literal> <operator>)</operator></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>binary</name> <operator>+=</operator> <operator>(</operator> <name>char</name> <operator>)</operator> <operator>(</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="char">'0'</literal> <operator>)</operator></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></while> <return>return <expr><name>binary</name></expr> ;</return> </block_content>}</block></function>
</unit>
