<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/MAXIMUM_UNIQUE_ELEMENT_EVERY_SUBARRAY_SIZE_K.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>static</ns0:specifier> <ns0:name>void</ns0:name></ns0:type> <ns0:name>find_max</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name><ns0:name>int</ns0:name> <ns0:index>[ ]</ns0:index></ns0:name></ns0:type> <ns0:name>A</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>N</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>K</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name><ns0:name>HashMap</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> , <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:type> <ns0:name>Count</ns0:name> <ns0:init>= <ns0:expr><ns0:operator>new</ns0:operator> <ns0:call><ns0:name><ns0:name>HashMap</ns0:name> <ns0:argument_list type="generic">&lt; &gt;</ns0:argument_list></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name><ns0:name>TreeSet</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:type> <ns0:name>Myset</ns0:name> <ns0:init>= <ns0:expr><ns0:operator>new</ns0:operator> <ns0:call><ns0:name><ns0:name>TreeSet</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:for>for <ns0:control>( <ns0:init><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>i</ns0:name> <ns0:init>= <ns0:expr><ns0:name>K</ns0:name> <ns0:operator>-</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:init> <ns0:condition><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>N</ns0:name></ns0:expr> ;</ns0:condition> <ns0:incr><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>++</ns0:operator></ns0:expr></ns0:incr> )</ns0:control> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>containsKey</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>put</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="number">1</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>get</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:if> <ns0:else>else<ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>put</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:else></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>Integer</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>parseInt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>String</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>valueOf</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>get</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Myset</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>add</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:if> <ns0:else>else<ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Myset</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>remove</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:else></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>Myset</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>size</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Nothing "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:if> <ns0:else>else<ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>Myset</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>last</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:else></ns0:if_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>x</ns0:name> <ns0:init>= <ns0:expr><ns0:name><ns0:name>A</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name> <ns0:operator>-</ns0:operator> <ns0:name>K</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>put</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>get</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>-</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>Integer</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>parseInt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>String</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>valueOf</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>get</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Myset</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>add</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>Integer</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>parseInt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>String</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>valueOf</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>Count</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>get</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Myset</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>remove</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>x</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:if></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:for> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>