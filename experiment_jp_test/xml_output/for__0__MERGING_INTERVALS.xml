<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/MERGING_INTERVALS.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>public</ns0:specifier> <ns0:specifier>static</ns0:specifier> <ns0:name>void</ns0:name></ns0:type> <ns0:name>mergeIntervals</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>Interval</ns0:name></ns0:type> <ns0:name><ns0:name>arr</ns0:name> <ns0:index>[ ]</ns0:index></ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Arrays</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>sort</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>arr</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:operator>new</ns0:operator> <ns0:class><ns0:super><ns0:name><ns0:name>Comparator</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Interval</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:super> <ns0:argument_list>( )</ns0:argument_list> <ns0:block>{ <ns0:function><ns0:type><ns0:specifier>public</ns0:specifier> <ns0:name>int</ns0:name></ns0:type> <ns0:name>compare</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>Interval</ns0:name></ns0:type> <ns0:name>i1</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>Interval</ns0:name></ns0:type> <ns0:name>i2</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:return>return <ns0:expr><ns0:name><ns0:name>i2</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>start</ns0:name></ns0:name> <ns0:operator>-</ns0:operator> <ns0:name><ns0:name>i1</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>start</ns0:name></ns0:name></ns0:expr> ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:function> }</ns0:block></ns0:class></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>index</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" The &#226;&#150;&#129; Merged &#226;&#150;&#129; Intervals &#226;&#150;&#129; are : &#226;&#150;&#129; "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:for>for <ns0:control>( <ns0:init><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>i</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:init> <ns0:condition><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>&lt;=</ns0:operator> <ns0:name>index</ns0:name></ns0:expr> ;</ns0:condition> <ns0:incr><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>++</ns0:operator></ns0:expr></ns0:incr> )</ns0:control> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" [ "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name><ns0:name>arr</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>start</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" , "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name><ns0:name>arr</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>end</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" ] "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:for> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>