<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/DIRECTION_LAST_SQUARE_BLOCK.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>static</ns0:specifier> <ns0:name>void</ns0:name></ns0:type> <ns0:name>direction</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>R</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>C</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>R</ns0:name> <ns0:operator>!=</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>C</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Right "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:return>return ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>R</ns0:name> <ns0:operator>!=</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>&gt;</ns0:operator> <ns0:name>C</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Down "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:return>return ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>R</ns0:name> <ns0:operator>!=</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>C</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Left "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:return>return ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>R</ns0:name> <ns0:operator>!=</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>&gt;</ns0:operator> <ns0:name>C</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Up "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:return>return ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>R</ns0:name> <ns0:operator>!=</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>&gt;</ns0:operator> <ns0:name>C</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Down "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:return>return ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>R</ns0:name> <ns0:operator>!=</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>!=</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>C</ns0:name> <ns0:operator>%</ns0:operator> <ns0:literal type="number">2</ns0:literal> <ns0:operator>==</ns0:operator> <ns0:literal type="number">0</ns0:literal> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>R</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>C</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>println</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Right "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:return>return ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>