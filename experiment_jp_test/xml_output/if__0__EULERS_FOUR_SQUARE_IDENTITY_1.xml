<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/EULERS_FOUR_SQUARE_IDENTITY_1.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>public</ns0:specifier> <ns0:specifier>static</ns0:specifier> <ns0:name>void</ns0:name></ns0:type> <ns0:name>checkEulerFourSquareIdentity</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>a</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>b</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>ab</ns0:name> <ns0:init>= <ns0:expr><ns0:name>a</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>b</ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>boolean</ns0:name></ns0:type> <ns0:name>flag</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="boolean">false</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>i</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:while>while <ns0:condition>( <ns0:expr><ns0:name>i</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>&lt;=</ns0:operator> <ns0:name>ab</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>j</ns0:name> <ns0:init>= <ns0:expr><ns0:name>i</ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:while>while <ns0:condition>( <ns0:expr><ns0:name>i</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>+</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>&lt;=</ns0:operator> <ns0:name>ab</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>k</ns0:name> <ns0:init>= <ns0:expr><ns0:name>j</ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:while>while <ns0:condition>( <ns0:expr><ns0:name>i</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>+</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>+</ns0:operator> <ns0:name>k</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>k</ns0:name> <ns0:operator>&lt;=</ns0:operator> <ns0:name>ab</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>double</ns0:name></ns0:type> <ns0:name>l</ns0:name> <ns0:init>= <ns0:expr><ns0:call><ns0:name><ns0:name>Math</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>sqrt</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>ab</ns0:name> <ns0:operator>-</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>+</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>+</ns0:operator> <ns0:name>k</ns0:name> <ns0:operator>*</ns0:operator> <ns0:name>k</ns0:name> <ns0:operator>)</ns0:operator></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>Math</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>floor</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>l</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>==</ns0:operator> <ns0:call><ns0:name><ns0:name>Math</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>ceil</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>l</ns0:name></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>l</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:name>k</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name>flag</ns0:name> <ns0:operator>=</ns0:operator> <ns0:literal type="boolean">true</ns0:literal></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" i &#226;&#150;&#129; = &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" j &#226;&#150;&#129; = &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" k &#226;&#150;&#129; = &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>k</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" l &#226;&#150;&#129; = &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:name>int</ns0:name> <ns0:operator>)</ns0:operator> <ns0:name>l</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:literal type="string">" Product &#226;&#150;&#129; of &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>a</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; and &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>b</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; can &#226;&#150;&#129; be &#226;&#150;&#129; written &#226;&#150;&#129; as &#226;&#150;&#129; sum &#226;&#150;&#129; of &#226;&#150;&#129; squares "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; of &#226;&#150;&#129; i , &#226;&#150;&#129; j , &#226;&#150;&#129; k , &#226;&#150;&#129; l &#226;&#150;&#129; \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>System</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>out</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>print</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>ab</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; = &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" * "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>i</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; + &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" * "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>j</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; + &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>k</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" * "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:name>k</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" &#226;&#150;&#129; + &#226;&#150;&#129; "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:name>int</ns0:name> <ns0:operator>)</ns0:operator> <ns0:name>l</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" * "</ns0:literal> <ns0:operator>+</ns0:operator> <ns0:operator>(</ns0:operator> <ns0:name>int</ns0:name> <ns0:operator>)</ns0:operator> <ns0:name>l</ns0:name> <ns0:operator>+</ns0:operator> <ns0:literal type="string">" \n "</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>k</ns0:name> <ns0:operator>+=</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:while> <ns0:expr_stmt><ns0:expr><ns0:name>j</ns0:name> <ns0:operator>+=</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:while> <ns0:expr_stmt><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>+=</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:while> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>