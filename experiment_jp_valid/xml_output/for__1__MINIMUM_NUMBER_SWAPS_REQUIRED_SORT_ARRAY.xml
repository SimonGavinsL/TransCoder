<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>public</ns0:specifier> <ns0:specifier>static</ns0:specifier> <ns0:name>int</ns0:name></ns0:type> <ns0:name>minSwaps</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name><ns0:name>int</ns0:name> <ns0:index>[ ]</ns0:index></ns0:name></ns0:type> <ns0:name>arr</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>n</ns0:name> <ns0:init>= <ns0:expr><ns0:name><ns0:name>arr</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>length</ns0:name></ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name><ns0:name>ArrayList</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name><ns0:name>Pair</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> , <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:type> <ns0:name>arrpos</ns0:name> <ns0:init>= <ns0:expr><ns0:operator>new</ns0:operator> <ns0:call><ns0:name><ns0:name>ArrayList</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name><ns0:name>Pair</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> , <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>arrpos</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>sort</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:operator>new</ns0:operator> <ns0:class><ns0:super><ns0:name><ns0:name>Comparator</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name><ns0:name>Pair</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> , <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:super> <ns0:argument_list>( )</ns0:argument_list> <ns0:block>{ <ns0:function><ns0:annotation>@ <ns0:name>Override</ns0:name></ns0:annotation> <ns0:type><ns0:specifier>public</ns0:specifier> <ns0:name>int</ns0:name></ns0:type> <ns0:name>compare</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name><ns0:name>Pair</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> , <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:type> <ns0:name>o1</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name><ns0:name>Pair</ns0:name> <ns0:argument_list type="generic">&lt; <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> , <ns0:argument><ns0:name>Integer</ns0:name></ns0:argument> &gt;</ns0:argument_list></ns0:name></ns0:type> <ns0:name>o2</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>o1</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>getKey</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>&gt;</ns0:operator> <ns0:call><ns0:name><ns0:name>o2</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>getKey</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:return>return <ns0:expr><ns0:operator>-</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ;</ns0:return></ns0:block_content></ns0:block></ns0:if> <ns0:if type="elseif">else if <ns0:condition>( <ns0:expr><ns0:call><ns0:name><ns0:name>o1</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>getKey</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call> <ns0:operator>.</ns0:operator> <ns0:call><ns0:name>equals</ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:call><ns0:name><ns0:name>o2</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>getKey</ns0:name></ns0:name> <ns0:argument_list>( )</ns0:argument_list></ns0:call></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> )</ns0:condition><ns0:block type="pseudo"><ns0:block_content> <ns0:return>return <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr> ;</ns0:return></ns0:block_content></ns0:block></ns0:if> <ns0:else>else<ns0:block type="pseudo"><ns0:block_content> <ns0:return>return <ns0:expr><ns0:literal type="number">1</ns0:literal></ns0:expr> ;</ns0:return></ns0:block_content></ns0:block></ns0:else></ns0:if_stmt> </ns0:block_content>}</ns0:block></ns0:function> }</ns0:block></ns0:class></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name><ns0:name>Boolean</ns0:name> <ns0:index>[ ]</ns0:index></ns0:name></ns0:type> <ns0:name>vis</ns0:name> <ns0:init>= <ns0:expr><ns0:operator>new</ns0:operator> <ns0:name><ns0:name>Boolean</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>n</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:expr_stmt><ns0:expr><ns0:call><ns0:name><ns0:name>Arrays</ns0:name> <ns0:operator>.</ns0:operator> <ns0:name>fill</ns0:name></ns0:name> <ns0:argument_list>( <ns0:argument><ns0:expr><ns0:name>vis</ns0:name></ns0:expr></ns0:argument> , <ns0:argument><ns0:expr><ns0:literal type="boolean">false</ns0:literal></ns0:expr></ns0:argument> )</ns0:argument_list></ns0:call></ns0:expr> ;</ns0:expr_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>ans</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:return>return <ns0:expr><ns0:name>ans</ns0:name></ns0:expr> ;</ns0:return> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>