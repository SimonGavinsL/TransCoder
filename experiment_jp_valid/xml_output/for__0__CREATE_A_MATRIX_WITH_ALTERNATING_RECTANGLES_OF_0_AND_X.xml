<ns0:unit xmlns:ns0="http://www.srcML.org/srcML/src" filename="experiment/original/CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X.java" language="Java" revision="1.0.0"><ns0:function><ns0:type><ns0:specifier>static</ns0:specifier> <ns0:name>void</ns0:name></ns0:type> <ns0:name>fill0X</ns0:name> <ns0:parameter_list>( <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>m</ns0:name></ns0:decl></ns0:parameter> , <ns0:parameter><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>n</ns0:name></ns0:decl></ns0:parameter> )</ns0:parameter_list> <ns0:block>{<ns0:block_content> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>i</ns0:name></ns0:decl> , <ns0:decl><ns0:type ref="prev" /><ns0:name>k</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:init></ns0:decl> , <ns0:decl><ns0:type ref="prev" /><ns0:name>l</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="number">0</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>int</ns0:name></ns0:type> <ns0:name>r</ns0:name> <ns0:init>= <ns0:expr><ns0:name>m</ns0:name></ns0:expr></ns0:init></ns0:decl> , <ns0:decl><ns0:type ref="prev" /><ns0:name>c</ns0:name> <ns0:init>= <ns0:expr><ns0:name>n</ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>char</ns0:name></ns0:type> <ns0:name><ns0:name>a</ns0:name> <ns0:index>[ ]</ns0:index> <ns0:index>[ ]</ns0:index></ns0:name> <ns0:init>= <ns0:expr><ns0:operator>new</ns0:operator> <ns0:name><ns0:name>char</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>m</ns0:name></ns0:expr> ]</ns0:index> <ns0:index>[ <ns0:expr><ns0:name>n</ns0:name></ns0:expr> ]</ns0:index></ns0:name></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:decl_stmt><ns0:decl><ns0:type><ns0:name>char</ns0:name></ns0:type> <ns0:name>x</ns0:name> <ns0:init>= <ns0:expr><ns0:literal type="char">' X '</ns0:literal></ns0:expr></ns0:init></ns0:decl> ;</ns0:decl_stmt> <ns0:while>while <ns0:condition>( <ns0:expr><ns0:name>k</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>m</ns0:name> <ns0:operator>&amp;&amp;</ns0:operator> <ns0:name>l</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>n</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:for>for <ns0:control>( <ns0:init><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>l</ns0:name></ns0:expr> ;</ns0:init> <ns0:condition><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>n</ns0:name></ns0:expr> ;</ns0:condition> <ns0:incr><ns0:expr><ns0:operator>++</ns0:operator> <ns0:name>i</ns0:name></ns0:expr></ns0:incr> )</ns0:control><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name><ns0:name>a</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>k</ns0:name></ns0:expr> ]</ns0:index> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>x</ns0:name></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:for> <ns0:expr_stmt><ns0:expr><ns0:name>k</ns0:name> <ns0:operator>++</ns0:operator></ns0:expr> ;</ns0:expr_stmt> <ns0:for>for <ns0:control>( <ns0:init><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>k</ns0:name></ns0:expr> ;</ns0:init> <ns0:condition><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>m</ns0:name></ns0:expr> ;</ns0:condition> <ns0:incr><ns0:expr><ns0:operator>++</ns0:operator> <ns0:name>i</ns0:name></ns0:expr></ns0:incr> )</ns0:control><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name><ns0:name>a</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index> <ns0:index>[ <ns0:expr><ns0:name>n</ns0:name> <ns0:operator>-</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ]</ns0:index></ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>x</ns0:name></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:for> <ns0:expr_stmt><ns0:expr><ns0:name>n</ns0:name> <ns0:operator>--</ns0:operator></ns0:expr> ;</ns0:expr_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>k</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>m</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:for>for <ns0:control>( <ns0:init><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>n</ns0:name> <ns0:operator>-</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ;</ns0:init> <ns0:condition><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:name>l</ns0:name></ns0:expr> ;</ns0:condition> <ns0:incr><ns0:expr><ns0:operator>--</ns0:operator> <ns0:name>i</ns0:name></ns0:expr></ns0:incr> )</ns0:control><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name><ns0:name>a</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>m</ns0:name> <ns0:operator>-</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ]</ns0:index> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index></ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>x</ns0:name></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:for> <ns0:expr_stmt><ns0:expr><ns0:name>m</ns0:name> <ns0:operator>--</ns0:operator></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:if_stmt><ns0:if>if <ns0:condition>( <ns0:expr><ns0:name>l</ns0:name> <ns0:operator>&lt;</ns0:operator> <ns0:name>n</ns0:name></ns0:expr> )</ns0:condition> <ns0:block>{<ns0:block_content> <ns0:for>for <ns0:control>( <ns0:init><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>m</ns0:name> <ns0:operator>-</ns0:operator> <ns0:literal type="number">1</ns0:literal></ns0:expr> ;</ns0:init> <ns0:condition><ns0:expr><ns0:name>i</ns0:name> <ns0:operator>&gt;=</ns0:operator> <ns0:name>k</ns0:name></ns0:expr> ;</ns0:condition> <ns0:incr><ns0:expr><ns0:operator>--</ns0:operator> <ns0:name>i</ns0:name></ns0:expr></ns0:incr> )</ns0:control><ns0:block type="pseudo"><ns0:block_content> <ns0:expr_stmt><ns0:expr><ns0:name><ns0:name>a</ns0:name> <ns0:index>[ <ns0:expr><ns0:name>i</ns0:name></ns0:expr> ]</ns0:index> <ns0:index>[ <ns0:expr><ns0:name>l</ns0:name></ns0:expr> ]</ns0:index></ns0:name> <ns0:operator>=</ns0:operator> <ns0:name>x</ns0:name></ns0:expr> ;</ns0:expr_stmt></ns0:block_content></ns0:block></ns0:for> <ns0:expr_stmt><ns0:expr><ns0:name>l</ns0:name> <ns0:operator>++</ns0:operator></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:if></ns0:if_stmt> <ns0:expr_stmt><ns0:expr><ns0:name>x</ns0:name> <ns0:operator>=</ns0:operator> <ns0:ternary><ns0:condition><ns0:expr><ns0:operator>(</ns0:operator> <ns0:name>x</ns0:name> <ns0:operator>==</ns0:operator> <ns0:literal type="char">'0'</ns0:literal> <ns0:operator>)</ns0:operator></ns0:expr> ?</ns0:condition><ns0:then> <ns0:expr><ns0:literal type="char">' X '</ns0:literal></ns0:expr> </ns0:then><ns0:else>: <ns0:expr><ns0:literal type="char">'0'</ns0:literal></ns0:expr></ns0:else></ns0:ternary></ns0:expr> ;</ns0:expr_stmt> </ns0:block_content>}</ns0:block></ns0:while> </ns0:block_content>}</ns0:block></ns0:function>
</ns0:unit>