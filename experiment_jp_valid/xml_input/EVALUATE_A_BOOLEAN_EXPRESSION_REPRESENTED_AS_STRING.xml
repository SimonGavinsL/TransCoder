<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>evaluateBoolExpr</name> <parameter_list>( <parameter><decl><type><name>StringBuffer</name></type> <name>s</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>s</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>n</name></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' A '</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><literal type="char">'0'</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' B '</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">'1'</literal> <operator>||</operator> <call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">'1'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><literal type="char">'0'</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><literal type="char">'0'</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for> <return>return <expr><call><name><name>s</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="char">'0'</literal></expr> ;</return> </block_content>}</block></function>
</unit>
