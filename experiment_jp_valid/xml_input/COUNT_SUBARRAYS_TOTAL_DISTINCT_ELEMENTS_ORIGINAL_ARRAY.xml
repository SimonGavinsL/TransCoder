<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/COUNT_SUBARRAYS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>countDistictSubarray</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name><name>arr</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>HashMap</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></type> <name>vis</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name> <argument_list type="generic">&lt; <argument><name>Integer</name></argument> , <argument><name>Integer</name></argument> &gt;</argument_list></name></super> <argument_list>( )</argument_list> <block>{ <function><annotation>@ <name>Override</name></annotation> <type><specifier>public</specifier> <name>Integer</name></type> <name>get</name> <parameter_list>( <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>containsKey</name> <argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if></if_stmt> <return>return <expr><call><name><name>super</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr> ;</return> </block_content>}</block></function> }</block></class></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>vis</name> <operator>.</operator> <name>put</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name><name>vis</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>vis</name> <operator>.</operator> <name>clear</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>right</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>window</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>left</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator> <name>left</name></expr></incr> )</control> <block>{<block_content> <while>while <condition>( <expr><name>right</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>window</name> <operator>&lt;</operator> <name>k</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>vis</name> <operator>.</operator> <name>put</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>right</name></expr> ]</index></name></expr></argument> , <argument><expr><call><name><name>vis</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>right</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>vis</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>right</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator> <name>window</name></expr> ;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>++</operator> <name>right</name></expr> ;</expr_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><name>window</name> <operator>==</operator> <name>k</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator> <name>n</name> <operator>-</operator> <name>right</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><call><name><name>vis</name> <operator>.</operator> <name>put</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>left</name></expr> ]</index></name></expr></argument> , <argument><expr><call><name><name>vis</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>left</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>vis</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name><name>arr</name> <index>[ <expr><name>left</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator> <name>window</name></expr> ;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></for> <return>return <expr><name>ans</name></expr> ;</return> </block_content>}</block></function>
</unit>
