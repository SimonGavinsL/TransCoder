<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>manipulated_seive</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>isprime</name> <operator>.</operator> <name>set</name></name> <argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>isprime</name> <operator>.</operator> <name>set</name></name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>isprime</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>prime</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>SPF</name> <operator>.</operator> <name>set</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> , <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>prime</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>*</operator> <call><name><name>prime</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>N</name> <operator>&amp;&amp;</operator> <call><name><name>prime</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <call><name><name>SPF</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>isprime</name> <operator>.</operator> <name>set</name></name> <argument_list>( <argument><expr><name>i</name> <operator>*</operator> <call><name><name>prime</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> , <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>SPF</name> <operator>.</operator> <name>set</name></name> <argument_list>( <argument><expr><name>i</name> <operator>*</operator> <call><name><name>prime</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> , <argument><expr><call><name><name>prime</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> </block_content>}</block></for> </block_content>}</block></function>
</unit>
