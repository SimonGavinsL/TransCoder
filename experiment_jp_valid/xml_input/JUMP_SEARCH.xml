<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/JUMP_SEARCH.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>jumpSearch</name> <parameter_list>( <parameter><decl><type><name><name>int</name> <index>[ ]</index></name></type> <name>arr</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>arr</name> <operator>.</operator> <name>length</name></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <call><name><name>Math</name> <operator>.</operator> <name>floor</name></name> <argument_list>( <argument><expr><call><name><name>Math</name> <operator>.</operator> <name>sqrt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name><name>arr</name> <index>[ <expr><call><name><name>Math</name> <operator>.</operator> <name>min</name></name> <argument_list>( <argument><expr><name>step</name></expr></argument> , <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>&lt;</operator> <name>x</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>step</name></expr> ;</expr_stmt> <expr_stmt><expr><name>step</name> <operator>+=</operator> <operator>(</operator> <name>int</name> <operator>)</operator> <call><name><name>Math</name> <operator>.</operator> <name>floor</name></name> <argument_list>( <argument><expr><call><name><name>Math</name> <operator>.</operator> <name>sqrt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>prev</name> <operator>&gt;=</operator> <name>n</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator> <literal type="number">1</literal></expr> ;</return></block_content></block></if></if_stmt> </block_content>}</block></while> <while>while <condition>( <expr><name><name>arr</name> <index>[ <expr><name>prev</name></expr> ]</index></name> <operator>&lt;</operator> <name>x</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>prev</name> <operator>++</operator></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><name>prev</name> <operator>==</operator> <call><name><name>Math</name> <operator>.</operator> <name>min</name></name> <argument_list>( <argument><expr><name>step</name></expr></argument> , <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator> <literal type="number">1</literal></expr> ;</return></block_content></block></if></if_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><name><name>arr</name> <index>[ <expr><name>prev</name></expr> ]</index></name> <operator>==</operator> <name>x</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>prev</name></expr> ;</return></block_content></block></if></if_stmt> <return>return <expr><operator>-</operator> <literal type="number">1</literal></expr> ;</return> </block_content>}</block></function>
</unit>
