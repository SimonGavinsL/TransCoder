<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NUMERALS.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>printRoman</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>char</name></type> <name><name>c</name> <index>[ ]</index></name> <init>= <expr><operator>new</operator> <name><name>char</name> <index>[ <expr><literal type="number">10001</literal></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>printf</name></name> <argument_list>( <argument><expr><literal type="string">" Invalid â number "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <return>return ;</return> </block_content>}</block></if></if_stmt> <while>while <condition>( <expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>digit</name> <argument_list>( <argument><expr><literal type="char">' M '</literal></expr></argument> , <argument><expr><name>number</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">1000</literal></expr> ;</expr_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>number</name> <operator>&gt;=</operator> <literal type="number">500</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&lt;</operator> <literal type="number">900</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>digit</name> <argument_list>( <argument><expr><literal type="char">' D '</literal></expr></argument> , <argument><expr><name>number</name> <operator>/</operator> <literal type="number">500</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">500</literal></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sub_digit</name> <argument_list>( <argument><expr><literal type="char">' C '</literal></expr></argument> , <argument><expr><literal type="char">' M '</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">100</literal></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>number</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&lt;</operator> <literal type="number">400</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>digit</name> <argument_list>( <argument><expr><literal type="char">' C '</literal></expr></argument> , <argument><expr><name>number</name> <operator>/</operator> <literal type="number">100</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">100</literal></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sub_digit</name> <argument_list>( <argument><expr><literal type="char">' C '</literal></expr></argument> , <argument><expr><literal type="char">' D '</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">100</literal></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>number</name> <operator>&gt;=</operator> <literal type="number">50</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&lt;</operator> <literal type="number">90</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>digit</name> <argument_list>( <argument><expr><literal type="char">' L '</literal></expr></argument> , <argument><expr><name>number</name> <operator>/</operator> <literal type="number">50</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">50</literal></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sub_digit</name> <argument_list>( <argument><expr><literal type="char">' X '</literal></expr></argument> , <argument><expr><literal type="char">' C '</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">10</literal></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>number</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&lt;</operator> <literal type="number">40</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>digit</name> <argument_list>( <argument><expr><literal type="char">' X '</literal></expr></argument> , <argument><expr><name>number</name> <operator>/</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">10</literal></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sub_digit</name> <argument_list>( <argument><expr><literal type="char">' X '</literal></expr></argument> , <argument><expr><literal type="char">' L '</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">10</literal></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>number</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>digit</name> <argument_list>( <argument><expr><literal type="char">' V '</literal></expr></argument> , <argument><expr><name>number</name> <operator>/</operator> <literal type="number">5</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">5</literal></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sub_digit</name> <argument_list>( <argument><expr><literal type="char">' I '</literal></expr></argument> , <argument><expr><literal type="char">' X '</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>number</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>number</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>digit</name> <argument_list>( <argument><expr><literal type="char">' I '</literal></expr></argument> , <argument><expr><name>number</name></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sub_digit</name> <argument_list>( <argument><expr><literal type="char">' I '</literal></expr></argument> , <argument><expr><literal type="char">' V '</literal></expr></argument> , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></while> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>printf</name></name> <argument_list>( <argument><expr><literal type="string">" Roman â numeral â is : â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>printf</name></name> <argument_list>( <argument><expr><literal type="string">" % c "</literal></expr></argument> , <argument><expr><name><name>c</name> <index>[ <expr><name>j</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></for> </block_content>}</block></function>
</unit>
