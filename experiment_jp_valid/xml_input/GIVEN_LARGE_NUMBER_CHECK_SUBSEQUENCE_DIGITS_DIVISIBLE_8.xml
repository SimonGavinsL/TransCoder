<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8.java"><function><type><specifier>static</specifier> <name>boolean</name></type> <name>isSubSeqDivisible</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>j</name></decl> , <decl><type ref="prev"/><name>k</name></decl> , <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>str</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>arr</name> <index>[ ]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[ <expr><name>l</name></expr> ]</index></name></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <for>for <control>( <init><expr><name>j</name> <operator>=</operator> <name>i</name></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>l</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <for>for <control>( <init><expr><name>k</name> <operator>=</operator> <name>j</name></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>l</name></expr> ;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr> ;</return></block_content></block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>arr</name> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>)</operator> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>j</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr> ;</return></block_content></block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator> <name><name>arr</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name><name>arr</name> <index>[ <expr><name>j</name></expr> ]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>arr</name> <index>[ <expr><name>k</name></expr> ]</index></name> <operator>)</operator> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>k</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr> ;</return></block_content></block></if></if_stmt> </block_content>}</block></for> </block_content>}</block></for> </block_content>}</block></for> <return>return <expr><literal type="boolean">false</literal></expr> ;</return> </block_content>}</block></function>
</unit>
