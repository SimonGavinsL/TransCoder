<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT.java"><function><type><specifier>static</specifier> <name>boolean</name></type> <name>findDuplicateparenthesis</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Character</name></argument> &gt;</argument_list></name></type> <name>Stack</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>char</name> <index>[ ]</index></name></type> <name>str</name> <init>= <expr><call><name><name>s</name> <operator>.</operator> <name>toCharArray</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>char</name></type> <name>ch</name> <range>: <expr><name>str</name></expr></range></decl></init> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>ch</name> <operator>==</operator> <literal type="char">' ) '</literal></expr> )</condition> <block>{<block_content> <decl_stmt><decl><type><name>char</name></type> <name>top</name> <init>= <expr><call><name><name>Stack</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>Stack</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>elementsInside</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>top</name> <operator>!=</operator> <literal type="char">' ( '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>elementsInside</name> <operator>++</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>top</name> <operator>=</operator> <call><name><name>Stack</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>Stack</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></while> <if_stmt><if>if <condition>( <expr><name>elementsInside</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> <return>return <expr><literal type="boolean">true</literal></expr> ;</return> </block_content>}</block></if></if_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><call><name><name>Stack</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><name>ch</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></else></if_stmt> </block_content>}</block></for> <return>return <expr><literal type="boolean">false</literal></expr> ;</return> </block_content>}</block></function>
</unit>
