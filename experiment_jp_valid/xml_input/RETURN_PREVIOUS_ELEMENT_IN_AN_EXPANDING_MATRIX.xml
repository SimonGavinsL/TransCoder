<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX.java"><function><type><specifier>static</specifier> <name>StringBuilder</name></type> <name>findLeft</name> <parameter_list>( <parameter><decl><type><name>StringBuilder</name></type> <name>str</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>str</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>--</operator></expr> ;</expr_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' d '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>str</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> , <argument><expr><literal type="char">' c '</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' b '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>str</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> , <argument><expr><literal type="char">' a '</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break> </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>( <expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' a '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>str</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> , <argument><expr><literal type="char">' b '</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>( <expr><call><name><name>str</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">' c '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>str</name> <operator>.</operator> <name>setCharAt</name></name> <argument_list>( <argument><expr><name>n</name></expr></argument> , <argument><expr><literal type="char">' d '</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></while> <return>return <expr><name>str</name></expr> ;</return> </block_content>}</block></function>
</unit>
