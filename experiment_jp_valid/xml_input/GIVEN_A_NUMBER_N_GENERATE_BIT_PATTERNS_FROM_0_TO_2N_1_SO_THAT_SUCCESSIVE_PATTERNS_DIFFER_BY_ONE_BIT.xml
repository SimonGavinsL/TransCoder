<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT_SUCCESSIVE_PATTERNS_DIFFER_BY_ONE_BIT.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>generateGrayarr</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>arr</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><literal type="string">"0"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><literal type="string">"1"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>j</name></decl> ;</decl_stmt> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>)</operator></expr> ;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></incr> )</control> <block>{<block_content> <for>for <control>( <init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>j</name> <operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>add</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>set</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> , <argument><expr><literal type="string">"0"</literal> <operator>+</operator> <call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><expr><name>j</name> <operator>=</operator> <name>i</name></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>arr</name> <operator>.</operator> <name>set</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> , <argument><expr><literal type="string">"1"</literal> <operator>+</operator> <call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> </block_content>}</block></for> <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>arr</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>println</name></name> <argument_list>( <argument><expr><call><name><name>arr</name> <operator>.</operator> <name>get</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> </block_content>}</block></function>
</unit>
