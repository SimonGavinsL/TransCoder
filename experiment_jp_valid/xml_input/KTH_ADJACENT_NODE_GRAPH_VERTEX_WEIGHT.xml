<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT.java"><function><type><specifier>static</specifier> <name>void</name></type> <name>printkthnode</name> <parameter_list>( <parameter><decl><type><name><name>Vector</name> <argument_list type="generic">&lt; <argument><name>pair</name></argument> &gt;</argument_list></name></type> <name><name>adj</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>wt</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> )</parameter_list> <block>{<block_content> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Collections</name> <operator>.</operator> <name>sort</name></name> <argument_list>( <argument><expr><name><name>adj</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> , <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name> <argument_list type="generic">&lt; <argument><name>pair</name></argument> &gt;</argument_list></name></super> <argument_list>( )</argument_list> <block>{ <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name> <parameter_list>( <parameter><decl><type><name>pair</name></type> <name>p1</name></decl></parameter> , <parameter><decl><type><name>pair</name></type> <name>p2</name></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><name><name>p1</name> <operator>.</operator> <name>first</name></name> <operator>-</operator> <name><name>p2</name> <operator>.</operator> <name>first</name></name></expr> ;</return> </block_content>}</block></function> }</block></class></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name><name>adj</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <call><name>size</name> <argument_list>( )</argument_list></call> <operator>&gt;=</operator> <name>k</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><name><name>adj</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <call><name>get</name> <argument_list>( <argument><expr><name><name>adj</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>.</operator> <call><name>size</name> <argument_list>( )</argument_list></call> <operator>-</operator> <name>k</name></expr></argument> )</argument_list></call> <operator>.</operator> <name>second</name> <operator>+</operator> <literal type="string">" â "</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name> <operator>.</operator> <name>out</name> <operator>.</operator> <name>print</name></name> <argument_list>( <argument><expr><literal type="string">" - 1"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></for> </block_content>}</block></function>
</unit>
