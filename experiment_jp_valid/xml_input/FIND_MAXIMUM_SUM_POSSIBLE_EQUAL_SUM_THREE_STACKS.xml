<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS.java"><function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>maxSum</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name><name>stack1</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>stack2</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name><name>stack3</name> <index>[ ]</index></name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n2</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n3</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>sum1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>sum2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>sum3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n1</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name>sum1</name> <operator>+=</operator> <name><name>stack1</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n2</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name>sum2</name> <operator>+=</operator> <name><name>stack2</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></for> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n3</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name>sum3</name> <operator>+=</operator> <name><name>stack3</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></for> <decl_stmt><decl><type><name>int</name></type> <name>top1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>top2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>top3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><literal type="boolean">true</literal></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><name>top1</name> <operator>==</operator> <name>n1</name> <operator>||</operator> <name>top2</name> <operator>==</operator> <name>n2</name> <operator>||</operator> <name>top3</name> <operator>==</operator> <name>n3</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr> ;</return></block_content></block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>sum1</name> <operator>==</operator> <name>sum2</name> <operator>&amp;&amp;</operator> <name>sum2</name> <operator>==</operator> <name>sum3</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>sum1</name></expr> ;</return></block_content></block></if></if_stmt> <if_stmt><if>if <condition>( <expr><name>sum1</name> <operator>&gt;=</operator> <name>sum2</name> <operator>&amp;&amp;</operator> <name>sum1</name> <operator>&gt;=</operator> <name>sum3</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum1</name> <operator>-=</operator> <name><name>stack1</name> <index>[ <expr><name>top1</name> <operator>++</operator></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>( <expr><name>sum2</name> <operator>&gt;=</operator> <name>sum3</name> <operator>&amp;&amp;</operator> <name>sum2</name> <operator>&gt;=</operator> <name>sum3</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum2</name> <operator>-=</operator> <name><name>stack2</name> <index>[ <expr><name>top2</name> <operator>++</operator></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>( <expr><name>sum3</name> <operator>&gt;=</operator> <name>sum2</name> <operator>&amp;&amp;</operator> <name>sum3</name> <operator>&gt;=</operator> <name>sum1</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum3</name> <operator>-=</operator> <name><name>stack3</name> <index>[ <expr><name>top3</name> <operator>++</operator></expr> ]</index></name></expr> ;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></while> </block_content>}</block></function>
</unit>
