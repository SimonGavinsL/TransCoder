<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="experiment/original/MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESSION_BALANCED.java"><function><type><specifier>static</specifier> <name>int</name></type> <name>countMinReversals</name> <parameter_list>( <parameter><decl><type><name>String</name></type> <name>expr</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>expr</name> <operator>.</operator> <name>length</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator> <literal type="number">1</literal></expr> ;</return></block_content></block></if></if_stmt> <decl_stmt><decl><type><name><name>Stack</name> <argument_list type="generic">&lt; <argument><name>Character</name></argument> &gt;</argument_list></name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name> <argument_list type="generic">&lt; &gt;</argument_list></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{<block_content> <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>expr</name> <operator>.</operator> <name>charAt</name></name> <argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt> <if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">' } '</literal> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name><name>s</name> <operator>.</operator> <name>empty</name></name> <argument_list>( )</argument_list></call></expr> )</condition> <block>{<block_content> <if_stmt><if>if <condition>( <expr><call><name><name>s</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call> <operator>==</operator> <literal type="char">' { '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>push</name></name> <argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></for> <decl_stmt><decl><type><name>int</name></type> <name>red_len</name> <init>= <expr><call><name><name>s</name> <operator>.</operator> <name>size</name></name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <while>while <condition>( <expr><operator>!</operator> <call><name><name>s</name> <operator>.</operator> <name>empty</name></name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>s</name> <operator>.</operator> <name>peek</name></name> <argument_list>( )</argument_list></call> <operator>==</operator> <literal type="char">' { '</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>s</name> <operator>.</operator> <name>pop</name></name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>++</operator></expr> ;</expr_stmt> </block_content>}</block></while> <return>return <expr><operator>(</operator> <name>red_len</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>)</operator></expr> ;</return> </block_content>}</block></function> <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name> <parameter_list>( <parameter><decl><type><name><name>String</name> <index>[ ]</index></name></type> <name>args</name></decl></parameter> )</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>String</name></type> <name>expr</name> <init>= <expr><literal type="string">"</literal></expr></init></decl></decl_stmt></block_content></block></function> } }
</unit>
